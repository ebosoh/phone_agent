\"import os\"  
\"from flask import Flask, request, send_from_directory\"  
\"from twilio.twiml.voice_response import VoiceResponse, Gather\"  
\"from elevenlabs.client import ElevenLabs\"  
\"from dotenv import load_dotenv\"  
\"from agent_core import get_response\"  
\"\"  
\"load_dotenv()\"  
\"\"  
\"app = Flask(__name__)\"  
\"eleven_labs_client = ElevenLabs(api_key=os.getenv(\\\"ELEVEN_LABS_API_KEY\\\"))\"  
\"\"  
\"call_histories = {}\"  
\"\"  
\"def generate_and_save_audio(text: str, call_sid: str) -> str:\"  
\"    audio_dir = \\\"static/audio\\\"\"  
\"    os.makedirs(audio_dir, exist_ok=True)\"  
\"    filename = f\\\"{call_sid}_{hash(text)}.mp3\\\"\"  
\"    audio_path = os.path.join(audio_dir, filename)\"  
\"    print(f\\\"Generating audio for text: '{text}'\\\")\"  
\"    audio_stream = eleven_labs_client.generate(\"  
\"        text=text,\"  
\"        voice=\\\"Rachel\\\",\"  
\"        model=\\\"eleven_multilingual_v2\\\"\"  
\"    )\"  
\"    with open(audio_path, \\\"wb\\\") as f:\"  
\"        for chunk in audio_stream:\"  
\"            f.write(chunk)\"  
\"    print(f\\\"Saved audio to {audio_path}\\\")\"  
\"    return f\\\"/static/audio/{filename}\\\"\"  
\"\"  
\"@app.route(\\\"/incoming_call\\\", methods=['POST'])\"  
\"def handle_incoming_call():\"  
\"    call_sid = request.values.get('CallSid')\"  
\"    print(f\\\"Incoming call from {request.values.get('From')} (SID: {call_sid})\\\")\"  
\"    call_histories[call_sid] = []\"  
\"    response = VoiceResponse()\"  
\"    response.say(\\\"Hello, you've reached the AI assistant. How can I help you today?\\\")\"  
\"    gather = Gather(input='speech', action='/process_speech', speechTimeout='auto')\"  
\"    response.append(gather)\"  
\"    return str(response)\"  
\"\"  
\"@app.route(\\\"/process_speech\\\", methods=['POST'])\"  
\"def handle_process_speech():\"  
\"    call_sid = request.values.get('CallSid')\"  
\"    user_speech = request.values.get('SpeechResult', '').strip()\"  
\"    print(f\\\"Received speech from user (SID: {call_sid}): '{user_speech}'\\\")\"  
\"    response = VoiceResponse()\"  
\"    if not user_speech:\"  
\"        response.say(\\\"I didn't catch that. Could you please repeat yourself?\\\")\"  
\"    else:\"  
\"        chat_history = call_histories.get(call_sid, [])\"  
\"        agent_text_response = get_response(user_speech, chat_history)\"  
\"        print(f\\\"Agent response (text): '{agent_text_response}'\\\")\"  
\"        chat_history.append((\\\"user\\\", user_speech))\"  
\"        chat_history.append((\\\"assistant\\\", agent_text_response))\"  
\"        call_histories[call_sid] = chat_history\"  
\"        audio_url = generate_and_save_audio(agent_text_response, call_sid)\"  
\"        response.play(audio_url)\"  
\"    gather = Gather(input='speech', action='/process_speech', speechTimeout='auto')\"  
\"    response.append(gather)\"  
\"    if request.values.get('CallStatus') == 'completed':\"  
\"        print(f\\\"Call {call_sid} completed. Cleaning up history.\\\")\"  
\"        if call_sid in call_histories:\"  
\"            del call_histories[call_sid]\"  
\"    return str(response)\"  
\"\"  
\"@app.route('/static/audio/<path:filename>')\"  
\"def serve_audio(filename):\"  
\"    return send_from_directory('static/audio', filename)\"  
\"\"  
\"if __name__ == \\\"__main__\\\":\"  
\"    app.run(debug=True, port=5001)\" 
